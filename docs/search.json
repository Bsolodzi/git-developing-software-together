[
  {
    "objectID": "preparation.html",
    "href": "preparation.html",
    "title": "Waht you need to do before the workshop",
    "section": "",
    "text": "During the workshop we will use Git for version control and GitHub as a remote repository. Details on how to do this are best described in Jenny Bryan’s fantastic Happy Git with R book. The core steps are:\n\nInstall git on your machine.\nThe instructions depend on your Operating System. Follow the instructions at https://happygitwithr.com/install-git.html.\nCreate a GitHub account.\nGo to github.com and create your free account.\nSet up git so it can work with GitHUb and RStudio.\nThis can be, unfortunately, a rather involved process so be patient. Again, the excellent Happy Git with R is your friend. Follow the instructions in this chapter to set up your GitHub Personal Access Token.\nIf you are on linux, we highly recommend this post by Danielle Navarro. It covers some of the same territory with more detail, and it can be cathartic to read someone who shares your pain.\n(Optional) In this workshop we will be using RStudio as a simple git GUI, but in the future you might want to use a more full-fledge client. Again, Happy Git with R recommends a few. We like GitKraken, which is free, feature-rich, and multi-platform."
  },
  {
    "objectID": "materials.html",
    "href": "materials.html",
    "title": "Getting the most of git",
    "section": "",
    "text": "Do you have something like this in your computer?\n/home/pao/Documents/thesis\n├── abstract.R\n├── thesis.Rmd\n├── thesis_reviwed.Rmd\n├── thesis_reviwed2.Rmd\n├── thesis_final.Rmd\n├── thesis_finalfinal.Rmd\n├── this_is_it.Rmd\n├── now_this_is_it_for_real_this_time_i_swear.Rmd\n└── FINAL.Rmd\nProbably we all have, or had something like this at one point because we didn’t use a version control system. Version control systems manage the evolution and changes of a set of files that we’ll call repository. If you ever looked at the history of a Google Docs file, it is like that but in a very controlled way. Git is one popular version control system.\nIf you work alone, git is great to track changes and recover previous version of your files. You can also use a remote repository (more later) to have a back up and share your work.\nIf you work as a team you can take advantage of all the above and also use version control as a tool to collaborate and organize the various versions of the same file present in the multiple computers you and they use."
  },
  {
    "objectID": "materials.html#why-git",
    "href": "materials.html#why-git",
    "title": "Getting the most of git",
    "section": "",
    "text": "Do you have something like this in your computer?\n/home/pao/Documents/thesis\n├── abstract.R\n├── thesis.Rmd\n├── thesis_reviwed.Rmd\n├── thesis_reviwed2.Rmd\n├── thesis_final.Rmd\n├── thesis_finalfinal.Rmd\n├── this_is_it.Rmd\n├── now_this_is_it_for_real_this_time_i_swear.Rmd\n└── FINAL.Rmd\nProbably we all have, or had something like this at one point because we didn’t use a version control system. Version control systems manage the evolution and changes of a set of files that we’ll call repository. If you ever looked at the history of a Google Docs file, it is like that but in a very controlled way. Git is one popular version control system.\nIf you work alone, git is great to track changes and recover previous version of your files. You can also use a remote repository (more later) to have a back up and share your work.\nIf you work as a team you can take advantage of all the above and also use version control as a tool to collaborate and organize the various versions of the same file present in the multiple computers you and they use."
  },
  {
    "objectID": "materials.html#but-what-we-mean-by-version-control",
    "href": "materials.html#but-what-we-mean-by-version-control",
    "title": "Getting the most of git",
    "section": "But what we mean by version control?",
    "text": "But what we mean by version control?\nLet’s imagine that we have a repository already working (later we’ll see how to create one). When you create a new file as part of the repository (or repo), that file is untracked or unversioned. This means that git will ignore the file and any change you made until you add it to the repo. At that point the file is staged and it ready to get into the repository. To do that you do a commit and save that version of the file to the repo. This workflow modify --&gt; add --&gt; commit will repeat every time you want to save a version of the file. We don’t recommend making a commit every time you save the file or change a comma, and its also not a good idea to make a commit with a billion of changes. With practice and depending on how do you work, you will find a comfortable middle ground.\n\n\n\nThe figure shows the states of a file: untracked or tracked. When it is tracked by the repository, the file can be staged, committed or modified. With the add action the file is “staged”, with the commit action the file is “saved” to the repository. This cycles repeats teach time the file is modified.\n\n\nSo, we mentioned add and commit, these are git commands. If you have experience working with the command line you could use git from there, but the same commands can be executed from a GUI like GitHub Desktop or GitKraken. During this workshop we’ll use RStudio.\n\nIf you want to try the command line, here are the core git commands:\n\ngit add &lt;file&gt; to add a file to the staging area.\ngit commit -m \"A very descriptive message\" to commit the files on the staging area."
  },
  {
    "objectID": "materials.html#did-i-mentioned-remote-repository",
    "href": "materials.html#did-i-mentioned-remote-repository",
    "title": "Getting the most of git",
    "section": "Did I mentioned remote repository?",
    "text": "Did I mentioned remote repository?\nYes, before we went through a local workflow. The repo lives in your computer and that’s it. But, you can also connect the local repository with a remote repository. For this workshop we are going to use GitHub to host remote repositories, but there are other options you can explore, such as GitLab.\nLet’s imagine we have a local repository, we made some commits and we want to send those changes to the remote repository (we’ll see how to create the remote repository later). For that we push the commits to the remote repository and then, the two repos are “up to date”.\nLater, a team mate makes a change to a file in their local repo and push it to the remote repository. Now, your local repo is “outdated” and you need to download those new commits from the remote repository to your computer. You pull the commits.\n\n\n\nConcept model of a workflow using RStudio projects and git. Files are added to the staging area, and then commited to the local repository. You can push commits to the remote repository and pull new commits to your computer.\n\n\nTools like GitHub also include features that help you to collaborate and manage repositories. For example, you can modify files and commit those changes using the web interface.\n\nIf you want to try the command line, here are the git commands:\n\ngit push to upload commits to the remote repository.\ngit pull to download commits from the remote repository to the local repo."
  },
  {
    "objectID": "materials.html#introduce-yourself-to-git",
    "href": "materials.html#introduce-yourself-to-git",
    "title": "Getting the most of git",
    "section": "Introduce yourself to Git",
    "text": "Introduce yourself to Git\nBefore you create your first repository you need to make sure that git and RStudio are friends and that git knows you. If you follow the pre-workshop instructions, RStudio, git, and GitHub are definitely talking to each other.\n\nYou can check that RStudio “sees” git by going to Tools --&gt; Global Options --&gt; Git/SVN. There you should find the path in your computer to the git installation.\n\nTo introduce yourself to git, that is to let it know your name and email you can use the usethis package.\nlibrary(usethis) \nuse_git_config(user.name = \"Jane Doe\",\n               user.email = \"jane@example.org\")\nSubstituting with your name and the email associated with your GitHub account.\n\nYou can do the same using the command line with\ngit config --global user.name 'Jane Doe'\ngit config --global user.email 'jane@example.com'"
  },
  {
    "objectID": "materials.html#creating-a-new-repository",
    "href": "materials.html#creating-a-new-repository",
    "title": "Getting the most of git",
    "section": "Creating a new repository",
    "text": "Creating a new repository\nThere are many ways to start a new repository, locally in your computer using the command line or an interface, from GitHub (or its friends), from RStudio! Here we’ll show you how to create a repo from GitHub, associate it to an RStudio project and work with it. But keep in mind that there are many other ways of working with git.\n\n1. Create an online repository.\n\nGo to github.com and log in.\nOn the top right corner, click on the “+” bottom and then “New repository”\n\nThen:\n\nRepository template: No template.\nRepository name: myrepo or whatever you wish to name your new project.\nDescription: Any short description of the project. Write this for humans.\nPublic.\nInitialize this repository with: nothing (we can set up everything from R).\n\nBefore going back to RStudio, copy the url for the repository. For example https://github.com/paocorrales/myrepo.git\n\n\n2. In RStudio, start a new Project:\n\nFile &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository https://github.com/paocorrales/myrepo.git.\nChoose the folder where you want to create the project.\nChoose “Open in new session”.\nAnd Click on “Create Project”.\n\n\nThe new folder in your computer will be a git repository, linked to a remote GitHub repository and an RStudio Project at the same time. This workflow also makes sure that all the configuration between the local and remote repos are done correctly.\nIt also adds a .gitignore file that includes a list of files that we don’t need to track (i.e. .Rhistory).\n\nCreate a new repository from command line:\nIf you already have a repote repository:\n\ngit clone &lt;repo url&gt;\n\nIf you want to start a local repository from scratch in the folder you are located:\n\ngit init"
  },
  {
    "objectID": "materials.html#local-changes",
    "href": "materials.html#local-changes",
    "title": "Getting the most of git",
    "section": "Local changes",
    "text": "Local changes\nIt’s time to put into practice some of the thing we’ve been talking.\n\nAdd, commit\n\nCreate a new RMarkdown file and save it.\nAdd it to the staging area and commit the file. You’ll need to add a descriptive message!\nMake a change on the file, it can be anything. Save it.\nRepeat step 2.\n\n\n\n\nGit panel with 3 untracked files.\n\n\n\n\n\nGit panel with 3 tracked files added to the staging area.\n\n\n\n\n\nRStudio interface to see file differences, write message’s commit and push it to the remote repository.\n\n\n\nIf everything went OK, you started tracking files, made changes, committed them to the local repository. You may see a message on the git tab saying that the local repo is ahead of the remote repo by 2 commits. You won’t see any changes on GitHub until you push those commits. You can do this at the end of the day if you prefer but if you work with others it may be a good idea to push everything after you do each commit.\n\nPush!\n\nNow, push the commits to the remote repository."
  },
  {
    "objectID": "materials.html#remote-changes",
    "href": "materials.html#remote-changes",
    "title": "Getting the most of git",
    "section": "Remote changes",
    "text": "Remote changes\nLet’s come back to GitHub. If you refresh the page, now you’ll see the files you committed just now. Let’s click on “Commits” to see the history of the repository. From this view, you can explore the repository at the “state” of each commit and look at the file differences.\nNow, we can try to make changes here.\n\nCreate a README\n\nOn the main page, click on the green bottom that says “Add a README”.\nAdd something to the file. READMEs usually are written in Markdown and contain information about the repo.\nAt the end of the page add a message on the first line and click on “Commit changes…”.\nCome back to the main page to see the README.\n\n\nThe new file and the changes you do on GitHub are only on the remote repository until you make a pull from the local repo. If you make changes on the local repo while it not up to date, you may encounter merge conflicts, which lead to headaches. This happens when the version of a file on the local repo is not compatible with its version on the remote repo. In those cases, git cannot decide which version is the right one and you have to do it yourself.\nTo avoid this problem (most of the time), you should do a pull before start doing anything else. Most of the time RStudio will show the “Already up-to-date” but it is good to make this a habit.\n\nPull from GitHub\n\nGo back to RStudio.\nTo the the Git pane.\nClick on the light blue arrow that says “Pull”.\nCheck the README file on the Files tab."
  },
  {
    "objectID": "materials.html#anatomy-of-github-repo",
    "href": "materials.html#anatomy-of-github-repo",
    "title": "Getting the most of git",
    "section": "Anatomy of GitHub Repo",
    "text": "Anatomy of GitHub Repo\n\nReadme files. Use a README.md file to explain what your project is, and how use it. README.md is the file that is automatically displayed when you open a GitHub repo.\nLicense. The license tell people how they can use the content of your repo. Generally, we use permissive licences and people can do almost anything with the materials. Examples are the MIT Licence or Apache. Some extra resources:\n\nChoose an open source license does what it says on the tin and helps you choose a licence.\nSoftware Licenses in Plain English explains licences’ legalese in simple terms\n\nContributing guide. A file called CONTRIBUTING.md and guidelines for contributors so they know what they should do if they want to help you out.\nCode of Conduct. Good projects have codes of conduct to make sure that people are treated well. Github has an Code of Conduct wizard to make it easy to add one.\nIssues. Allows you to manage the project."
  },
  {
    "objectID": "materials.html#collaborating-with-others",
    "href": "materials.html#collaborating-with-others",
    "title": "Getting the most of git",
    "section": "Collaborating with others",
    "text": "Collaborating with others\nWhen collaborating on a project you can find yourself in one of two scenarios\n\nYou have write permission of the repo you are working on.\nYou don’t have write permission on the repo.\n\nThe first situation is the most common when working together with an team on a long term project. You can clone the repo following the these same instructions and use the same workflow as before. When you try to push your changes to the remote repository, GitHub will check if you have the rights to modify the repo. The only difference between this and working on your own is that you need to communicate well so that two people are not working on the same thing. But this is true with or without git.\nThe second situation is common when contributing to strangers’ projects, such as fixing bugs in open source packages. In this case, you need to first fork the repository, which creates a remote repository linked to your GitHub account to which you will have complete access. Now you work in this fork using the normal workflow: modify, add, commit and push. But for your changes to be integrated into the original repository, you need to create a pull request (or PR). This will let the owner of the original repo know that you made some changes that you think should be merged. The owner can then accept, reject or ask for modifications. Once they accept your pull request, your modifications will be safe in the original repository.\n\n\n\nConcep model of the remote workflow. A foreign remote repository can be forked to an owned remote repository with a “fork”. The remote repository is copied into a local repository with a “clone”. Files inside the local repository and the remote repository are synced with push and pull. The owned remote repository can be merged into the foreign remote repository with a pull request.\n\n\n\nLet’s plant some trees\nAs a fun example will collaborate with the recently open Flametree galley and do some pull request on the way.\n\n\nFork the repository\n\nGo to github.com/paocorrales/flametree_gallery\nFork the repository using the “Fork” button on the top right corner.\n\n\n\n\nScreenshot of a repository showing where the “fork” button is.\n\n\nNow, you have a copy of the repo in your GitHub account.\n\nCopy the url of the repo and clone it to your computer following the instructions to create a new repo.\n\n\n\n\nScreenshot of a forked repo showing where to copy the url to clone the repo.\n\n\n\nNow you have an RStudio project (that is also a repo) that is a copy of the one in the original repo. It’s a very small project with a few file. template_script.R includes the necessary code to create beautiful images like this:\n\n\n\nImage of trees created using R\n\n\nIt uses the flametree library created by Danielle Navarro. How it works is not part of the topics of the workshop (sadly!) but it’s a good excuse to practice doing pull requests.\n\nMake a change in the repo\n\nMake a copy of the template_script.R file and change it’s name to &lt;your-name.R&gt;\nChange the value of the first 3 variables in the script:\n\nname your name.\nseed there are some random things happening there.\nshades choose 4 colors that you like.\n\n\nYou can run the code if you want :)\n\nSave the file, add it to the staging area and commit it (include only the .R file you created).\nPush it to your remote repository.\n\n\nAt this point you’ve made a change in your local repo (that is a copy of the forked repo) and pushed those changes to your remote repo in GitHub. The original repo doesn’t know this.\nIf you want to contribute the changes you made to the original repo, it’s time to make a pull request.\n\nMake a pull request\n\nGo to your repo in GitHub, you will see that you made the last commit and a message like this:\n\n\n\n\nScreenshot of a forked repo in GitHub with a new commit. It shows how to star a new pull request.\n\n\n\nClick on “Open pull request”.\nAnd click on “Create pull request”.\nWe are almost there. Complete the pull request with a title and a message and then finish the PR.\n\n\n\n\nScreenshot of GitHub showing how to add a title, message and finish a pull request\n\n\nAnd that’s it!\n\nThe owner/s of the repo will receive an email. They can review the pull request, comment on it and eventually accept the contribution. When that happen the changes you made will apear in the repo."
  },
  {
    "objectID": "materials.html#resources",
    "href": "materials.html#resources",
    "title": "Getting the most of git",
    "section": "Resources",
    "text": "Resources\nHappy git with R, by Jenny Bryan\nTaller de git developed by Yanina Bellini Saibene and Marysol Gatti (in Spanish)"
  },
  {
    "objectID": "presentation.html#hi-and-welcome",
    "href": "presentation.html#hi-and-welcome",
    "title": "Developing Software Together",
    "section": "Hi and welcome!",
    "text": "Hi and welcome!\n\n\n\n\n\n\n\n\n\n\n\nfosstodon.org/@paocorrales\npaocorrales.github.io\n\n\n\n\n\n\n\n\n\n\nfosstodon.org/@yabellini\nyabellini.netlify.app/"
  },
  {
    "objectID": "presentation.html#about-this-workshop",
    "href": "presentation.html#about-this-workshop",
    "title": "Developing Software Together",
    "section": "About this workshop",
    "text": "About this workshop\n\n\n\nWhy using git\nHow to use git (and GitHub)\nHow to work git in the context of writing R code\nHow to colaborate with others"
  },
  {
    "objectID": "presentation.html#control-version-cycle",
    "href": "presentation.html#control-version-cycle",
    "title": "Developing Software Together",
    "section": "Control version cycle",
    "text": "Control version cycle\n\nThe figure shows the states of a file: untracked or tracked. When it is tracked by the repository, the file can be staged, committed or modified. With the add action the file is “staged”, with the commit action the file is “saved” to the repository. This cycles repeats teach time the file is modified."
  },
  {
    "objectID": "presentation.html#our-workflow",
    "href": "presentation.html#our-workflow",
    "title": "Developing Software Together",
    "section": "Our workflow",
    "text": "Our workflow\n\nConcept model of a workflow using RStudio projects and git. Files are added to the staging area, and then commited to the local repository. You can push commits to the remote repository and pull new commits to your computer."
  },
  {
    "objectID": "presentation.html#working-with-others",
    "href": "presentation.html#working-with-others",
    "title": "Developing Software Together",
    "section": "Working with others",
    "text": "Working with others\n\n\nConcep model of the remote workflow. A foreign remote repository can be forked to an owned remote repository with a “fork”. The remote repository is copied into a local repository with a “clone”. Files inside the local repository and the remote repository are synced with push and pull. The owned remote repository can be merged into the foreign remote repository with a pull request."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "It is a three-hour course on how to use Git and GitHub to collaboratively develop open source software with the R language. It’s organize for the Champions program of rOpenSci.\nPlease visit the “Preparation” section to follow the instructions to install git and setup everything you’ll need for the course.\n\n\n\nIllustration by Alison Horst\n\n\n\nTrainers\nPaola Corrales: rOpenSci Champion. Trainer and instructor for The Carpentries and RStudio certified instructor. R-Ladies Global Team.\nYanina Bellini Saibene: rOpenSci Community Manager. Trainer and instructor for The Carpentries and RStudio certified instructor. R-Ladies Global Team.\n\n\nLicense\n All materials in this course are under the license Creative Commons Attribution-ShareAlike 4.0 International License."
  },
  {
    "objectID": "materials_command_line.html",
    "href": "materials_command_line.html",
    "title": "Getting the most of git",
    "section": "",
    "text": "Do you have something like this in your computer?\n/home/pao/Documents/thesis\n├── abstract.R\n├── thesis.Rmd\n├── thesis_reviwed.Rmd\n├── thesis_reviwed2.Rmd\n├── thesis_final.Rmd\n├── thesis_finalfinal.Rmd\n├── this_is_it.Rmd\n├── now_this_is_it_for_real_this_time_i_swear.Rmd\n└── FINAL.Rmd\nProbably we all have, or had something like this at one point because we didn’t use a version control system. Version control systems manage the evolution and changes of a set of files that we’ll call repository. If you ever looked at the history of a Google Docs file, it is like that but in a very controlled way. Git is one popular version control system.\nIf you work alone, git is great to track changes and recover previous version of your files. You can also use a remote repository (more later) to have a back up and share your work.\nIf you work as a team you can take advantage of all the above and also use version control as a tool to collaborate and organize the various versions of the same file present in the multiple computers you and they use."
  },
  {
    "objectID": "materials_command_line.html#why-git",
    "href": "materials_command_line.html#why-git",
    "title": "Getting the most of git",
    "section": "",
    "text": "Do you have something like this in your computer?\n/home/pao/Documents/thesis\n├── abstract.R\n├── thesis.Rmd\n├── thesis_reviwed.Rmd\n├── thesis_reviwed2.Rmd\n├── thesis_final.Rmd\n├── thesis_finalfinal.Rmd\n├── this_is_it.Rmd\n├── now_this_is_it_for_real_this_time_i_swear.Rmd\n└── FINAL.Rmd\nProbably we all have, or had something like this at one point because we didn’t use a version control system. Version control systems manage the evolution and changes of a set of files that we’ll call repository. If you ever looked at the history of a Google Docs file, it is like that but in a very controlled way. Git is one popular version control system.\nIf you work alone, git is great to track changes and recover previous version of your files. You can also use a remote repository (more later) to have a back up and share your work.\nIf you work as a team you can take advantage of all the above and also use version control as a tool to collaborate and organize the various versions of the same file present in the multiple computers you and they use."
  },
  {
    "objectID": "materials_command_line.html#but-what-we-mean-by-version-control",
    "href": "materials_command_line.html#but-what-we-mean-by-version-control",
    "title": "Getting the most of git",
    "section": "But what we mean by version control?",
    "text": "But what we mean by version control?\nLet’s imagine that we have a repository already working (later we’ll see how to create one). When you create a new file as part of the repository (or repo), that file is untracked or unversioned. This means that git will ignore the file and any change you made until you add it to the repo. At that point the file is staged and it ready to get into the repository. To do that you do a commit and save that version of the file to the repo. This workflow modify then add then commit will repeat every time you want to save a version of the file. We don’t recommend making a commit every time you save the file or change a comma, and its also not a good idea to make a commit with a billion of changes. With practice and depending on how do you work, you will find a comfortable middle ground.\n\n\n\nThe figure shows the states of a file: untracked or tracked. When it is tracked by the repository, the file can be staged, committed or modified. With the add action the file is “staged”, with the commit action the file is “saved” to the repository. This cycles repeats teach time the file is modified.\n\n\nSo, we mentioned add and commit, these are git commands. If you have experience working with the command line you could use git from there, but the same commands can be executed from a GUI like GitHub Desktop or GitKraken. For this version of the materials we’ll use the git commands and the command line or Terminal.\n\nThe core git commands are:\n\ngit add &lt;file&gt; to add a file to the staging area.\ngit commit -m \"A very descriptive message\" to commit the files on the staging area.\ngit status to check the status of each file in the repository."
  },
  {
    "objectID": "materials_command_line.html#did-i-mentioned-remote-repository",
    "href": "materials_command_line.html#did-i-mentioned-remote-repository",
    "title": "Getting the most of git",
    "section": "Did I mentioned remote repository?",
    "text": "Did I mentioned remote repository?\nYes, before we went through a local workflow. The repo lives in your computer and that’s it. But, you can also connect the local repository with a remote repository. For this workshop we are going to use GitHub to host remote repositories, but there are other options you can explore, such as GitLab.\nLet’s imagine we have a local repository, we made some commits and we want to send those changes to the remote repository (we’ll see how to create the remote repository later). For that we push the commits to the remote repository and then, the two repos are “up to date”.\nLater, a team mate makes a change to a file in their local repo and push it to the remote repository. Now, your local repo is “outdated” and you need to download those new commits from the remote repository to your computer. You pull the commits.\n\n\n\nConcept model of a workflow using RStudio projects and git. Files are added to the staging area, and then commited to the local repository. You can push commits to the remote repository in GitHub and pull new commits from the remote repository to your computer.\n\n\nTools like GitHub also include features that help you to collaborate and manage repositories. For example, you can modify files and commit those changes using the web interface.\n\nThe git commands to work with a remote repository are:\n\ngit push to upload commits to the remote repository.\ngit pull to download commits from the remote repository to the local repo."
  },
  {
    "objectID": "materials_command_line.html#introduce-yourself-to-git",
    "href": "materials_command_line.html#introduce-yourself-to-git",
    "title": "Getting the most of git",
    "section": "Introduce yourself to Git",
    "text": "Introduce yourself to Git\nBefore you create your first repository you need to make sure that git knows you. If you follow the pre-workshop instructions, you have git installed in your computare and you own a GitHub account.\nTo introduce yourself to git, that is to let it know your name and email you can use the command line package.\n\ngit config --global user.name 'Jane Doe'\ngit config --global user.email 'jane@example.com'\n\nSubstituting with your name and the email associated with your GitHub account. That’s it!"
  },
  {
    "objectID": "materials_command_line.html#creating-a-new-repository",
    "href": "materials_command_line.html#creating-a-new-repository",
    "title": "Getting the most of git",
    "section": "Creating a new repository",
    "text": "Creating a new repository\nThere are many ways to start a new repository, locally in your computer using the command line or an interface or from GitHub (or its friends). Here we’ll show you how to create a repo from GitHub, associate it to an RStudio project (or simple use it without R or RStudio) and work with it. But keep in mind that there are many other ways of working with git.\n\n1. Create an online repository.\n\nGo to github.com and log in.\nOn the header of the page, navigate to the new “Create new” menu, and then select “New repository”\n\nIn the “Create a new repository” page navigate to complete the necesiry information:\n\nRepository template: No template.\nRepository name: myrepo or whatever you wish to name your new project.\nDescription: Any short description of the project. Write this for humans.\nVisibility: Public.\nNo README file\n.gitignore template: None\nLicence: None\n\nFinaly, select the “Create Repository” button.\nBefore going back to the command line, copy the url for the repositor. And example is https://github.com/paocorrales/myrepo.git\n\n\n2. In the command line:\n\nBrowse to the parent folder you want to use for you repository.\ntype git clone &lt;remote repository url&gt; using the url you just copied.\n\nYou may get a warning saying: “warning: You appear to have cloned an empty repository.”. Don’t worry about that. We’ll create a file soon.\n\nThe new folder in your computer will be a git repository, linked to a remote GitHub repository. There you can work, for example with an RStudio Project. This workflow also makes sure that all the configuration between the local and remote repos are done correctly.\nIn this case it won’t add a .gitignore file. You may want to add one in the future, as this file includes a list of files that we don’t need to track (i.e. .Rhistory).\n\nAgain, these are the key commands:\nIf you already have a repote repository:\n\ngit clone &lt;repo url&gt;\n\nIf you want to start a local repository from scratch in the folder you are located:\n\ngit init"
  },
  {
    "objectID": "materials_command_line.html#local-changes",
    "href": "materials_command_line.html#local-changes",
    "title": "Getting the most of git",
    "section": "Local changes",
    "text": "Local changes\nIt’s time to put into practice some of the thing we’ve been talking.\n\nAdd, commit\n\nCreate a new file and save it. It can be any type of file.\nCheck the status of the files in the repository with git status. The file you’ve just created will be unther “Untracked files”\nAdd the to the staging area with git add &lt;file name&gt;. You can check the status of the repo again to see what changed.\nCommit the file with git commit -m &lt;message&gt;. You’ll need to add a descriptive message!\nCheck the status of the repo again.\n\nIf you have commited all the changes in the file you will get a message saying “nothing to commit, working tree clean”.\n\nIf everything went OK, you started tracking files, made changes, committed them to the local repository. You won’t see any changes on GitHub until you push those commits. You can do this at the end of the day if you prefer but if you work with others it may be a good idea to push everything after you do each commit.\n\nPush!\n\nNow, push the commits to the remote repository with git push.\n\nBecause is the first time you push commits to the remote repository, git will automaticaly create a new branch. We won’t worry about branch for now."
  },
  {
    "objectID": "materials_command_line.html#remote-changes",
    "href": "materials_command_line.html#remote-changes",
    "title": "Getting the most of git",
    "section": "Remote changes",
    "text": "Remote changes\nLet’s come back to GitHub. If you refresh the page, now you’ll see the files you committed just now. If you navigate to the “commit” or “commits” link you can access the the history of the repository. From this view, you can explore the repository at the “state” of each commit and look at the file differences. Let’s return to the previws page.\nFrom the main page of the repository, we can try to make changes to the files.\n\nCreate a README\n\nOn the main page, navigate to the bottom that says “Add a README”.\nDon’t change the name of the file.\nAdd something to the content of the file. READMEs usually are written in Markdown and contain information about the repo.\nNavigate to the “Commit changes…” button to save and commit the file.\nAdd a message.\nNavigate to the “commit file” button.\nCome back to the main page to see the README.\n\n\nThe new file and the changes you do on GitHub are only on the remote repository until you make a pull from the local repo. If you make changes on the local repo while it not up to date, you may encounter merge conflicts, which lead to headaches. This happens when the version of a file on the local repo is not compatible with its version on the remote repo. In those cases, git cannot decide which version is the right one and you have to do it yourself.\nTo avoid this problem (most of the time), you should do a pull before start doing anything else. Most of the time the command line will show the “Already up-to-date” but it is good to make this a habit.\n\nPull from GitHub\n\nGo back to Terminal.\nType git pull.\nGit will download the new changes from GitHub and tell you how many files were changed.\n\nNow both repositories are sincronized."
  },
  {
    "objectID": "materials_command_line.html#anatomy-of-github-repo",
    "href": "materials_command_line.html#anatomy-of-github-repo",
    "title": "Getting the most of git",
    "section": "Anatomy of GitHub Repo",
    "text": "Anatomy of GitHub Repo\n\nReadme files. Use a README.md file to explain what your project is, and how use it. README.md is the file that is automatically displayed when you open a GitHub repo.\nLicense. The license tell people how they can use the content of your repo. Generally, we use permissive licences and people can do almost anything with the materials. Examples are the MIT Licence or Apache. Some extra resources:\n\nChoose an open source license does what it says on the tin and helps you choose a licence.\nSoftware Licenses in Plain English explains licences’ legalese in simple terms\n\nContributing guide. A file called CONTRIBUTING.md and guidelines for contributors so they know what they should do if they want to help you out.\nCode of Conduct. Good projects have codes of conduct to make sure that people are treated well. Github has an Code of Conduct wizard to make it easy to add one.\nIssues. Allows you to manage the project."
  },
  {
    "objectID": "materials_command_line.html#collaborating-with-others",
    "href": "materials_command_line.html#collaborating-with-others",
    "title": "Getting the most of git",
    "section": "Collaborating with others",
    "text": "Collaborating with others\nWhen collaborating on a project you can find yourself in one of two scenarios\n\nYou have write permission of the repo you are working on.\nYou don’t have write permission on the repo.\n\nThe first situation is the most common when working together with an team on a long term project. You can clone the repo following the these same instructions and use the same workflow as before. When you try to push your changes to the remote repository, GitHub will check if you have the rights to modify the repo. The only difference between this and working on your own is that you need to communicate well so that two people are not working on the same thing. But this is true with or without git.\nThe second situation is common when contributing to strangers’ projects, such as fixing bugs in open source packages. In this case, you need to first fork the repository, which creates a remote repository linked to your GitHub account to which you will have complete access. Now you work in this fork using the normal workflow: modify, add, commit and push. But for your changes to be integrated into the original repository, you need to create a pull request (or PR). This will let the owner of the original repo know that you made some changes that you think should be merged. The owner can then accept, reject or ask for modifications. Once they accept your pull request, your modifications will be safe in the original repository.\n\n\n\nConcep model of the remote workflow. A foreign remote repository can be forked to an owned remote repository with the “fork” command. The remote repository is copied into a local repository with a the “clone” command. Files inside the local repository and the remote repository are synced with push and pull. The owned remote repository can be merged into the foreign remote repository with a pull request.\n\n\n\nLet’s plant some trees\nAs a fun example will collaborate with the recently open Flametree galley and do some pull request on the way.\n\n\nFork the repository\n\nGo to github.com/paocorrales/flametree_gallery\nFork the repository navigating to the “Fork” button on the top of the page.\nYou don’t need to change the information.\nNavigate to the “Create fork” button to create a copy of the repo in you GitHub account.\n\n\n\n\nScreenshot of a repository showing where the “fork” button is.\n\n\nNow, you have a copy of the repo in your GitHub account.\n\nCopy the url of the repo and clone it to your computer following the instructions to create a new repo.\n\n\n\n\nScreenshot of a forked repo showing where to copy the url to clone the repo.\n\n\n\nNow you have an RStudio project (that is also a repo) that is a copy of the one in the original repo. It’s a very small project with a few file. template_script.R includes the necessary code to create beautiful images of trees from R code:\n\n\n\nImage of trees created using R\n\n\nIt uses the flametree library created by Danielle Navarro. How it works is not part of the topics of the workshop (sadly!) but it’s a good excuse to practice doing pull requests.\n\nMake a change in the repo\n\nMake a copy of the template_script.R file and change it’s name to &lt;your-name.R&gt;\nChange the value of the first 3 variables in the script:\n\nname your name.\nseed there are some random things happening there.\nshades choose 4 colors.\n\n\nYou can run the code if you want.\n\nSave the file, add it to the staging area and commit it (include only the .R file you created).\nPush it to your remote repository.\n\n\nAt this point you’ve made a change in your local repo (that is a copy of the forked repo) and pushed those changes to your remote repo in GitHub. The original repo doesn’t know this.\nIf you want to contribute the changes you made to the original repo, it’s time to make a pull request.\n\nMake a pull request\n\nGo to your repo in GitHub, you will see that you made the last commit.\n\n\n\n\nScreenshot of a forked repo in GitHub with a new commit. It shows how to star a new pull request.\n\n\n\nNavigate to the “Contribute” button.\nAnd then to “Open pull request”.\nWe are almost there. In this page you can change the title of the pull request and write a message for the owner of the original repo.\nNavigate to “Create pull request” button and press enter to finish the pull request.\n\n\n\n\nScreenshot of GitHub showing how to add a title, message and finish a pull request\n\n\nAnd that’s it!\n\nThe owner/s of the repo will receive an email. They can review the pull request, comment on it and eventually accept the contribution. When that happen the changes you made will apear in the repo."
  },
  {
    "objectID": "materials_command_line.html#resources",
    "href": "materials_command_line.html#resources",
    "title": "Getting the most of git",
    "section": "Resources",
    "text": "Resources\nHappy git with R, by Jenny Bryan\nTaller de git developed by Yanina Bellini Saibene and Marysol Gatti (in Spanish)"
  }
]